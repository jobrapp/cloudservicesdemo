apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

// NOTE: Pass in the following (Run from command line):
// ./gradlew bintrayUpload -Pbintray_key=<key> -Pbintray_user=<user>


ext {
    supportVersion = "27.1.1"
    currentVersionCode = 1
    currentVersion = '1.0'
    github = 'https://github.com/jobrapp/cloudservicesdemo'
    githubUrl = 'https://github.com/jobrapp/cloudservicesdemo.git'
    projName = 'CloudServices'
    projDescription = 'Library for Connecting to Cloud Services'
    groupId = 'com.jobrapp.cloudservices'
    buildPath = 'com/jobrapp/cloudservices/' + currentVersion
}

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode currentVersionCode
        versionName currentVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    sourceSets {
        main.kotlin.srcDirs += 'src/main/java'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        ignoreWarnings true
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:design:$supportVersion"
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.20"

    implementation 'com.squareup.okio:okio:1.14.0'

    // Google Drive
    implementation 'com.google.android.gms:play-services-auth:12.0.1'
    implementation 'com.google.android.gms:play-services-drive:12.0.1'

    // Gmail
    implementation('com.google.api-client:google-api-client-android:1.23.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation('com.google.apis:google-api-services-gmail:v1-rev83-1.23.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    // Dropbox
    implementation 'com.dropbox.core:dropbox-core-sdk:3.0.7'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    // Box
    implementation 'com.box:box-android-sdk:4.1.0'

    // Microsoft
    // Include the sdk as a dependency
    implementation ('com.onedrive.sdk:onedrive-sdk-android:1.3+') {
        transitive = false
    }

    // Include supported authentication methods for your application
    implementation ('com.microsoft.services.msa:msa-auth:0.8.+')
    implementation ('com.microsoft.aad:adal:1.14.0')

    // Test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

repositories {
    mavenCentral()
    google()
}

kotlin {
    experimental {
        coroutines "enable"
    }
}


task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}


task generateJavadocs(type: Javadoc) {
    excludes = ['**/*.kt']
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath()
            .join(File.pathSeparator))
    classpath += project.files(configurations.compile)
    failOnError false
}


task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}

generateJavadocsJar.dependsOn generateJavadocs


artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}


install {
    repositories.mavenInstaller {

        pom.project {
            name projName
            description projDescription
            url github
            inceptionYear '2018'

            packaging 'aar'
            groupId groupId
            artifactId projName
            version currentVersion

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection githubUrl
                url github

            }
            developers {
                developer {
                    name 'Kevin Moore'
                }
            }
        }
    }
}

group = groupId
version = currentVersion


bintray {
    if (!project.hasProperty('bintray_key')) {
        ext.bintray_key = ''
    }
    if (!project.hasProperty('bintray_user')) {
        ext.bintray_user = ''
    }
    user = bintray_user
    key = bintray_key
    filesSpec {
        from ('build/libs') {
            include '*.jar'
            rename ("cloudservices-" + currentVersion + "-(.*)\\.jar", projName + '-' + currentVersion + "-\$1.jar")
        }
        into buildPath
        from ('build/outputs/aar') {
            include 'cloudservices-release.aar'
            rename {projName + '-' + currentVersion + ".aar"}
        }
        into buildPath
        from ('build/poms') {
            include '*.xml'
            rename {projName + '-' + currentVersion + ".pom"}
        }
        into buildPath
    }
//    dryRun = false //Whether to run this as dry-run, without deploying
    configurations = ['archives']
//    override = true
    pkg {
        repo = 'maven'
        name = projName

        labels = ['android']
        licenses = ['Apache-2.0']
        vcsUrl = githubUrl
        websiteUrl = github
    }
}

bintrayUpload.dependsOn assemble,generateJavadocsJar
